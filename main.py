import asyncio
import logging
from random import randint
import time
from aiogram import F, Bot, types, Dispatcher
from aiogram.filters.command import Command 
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import copy
import pymongo
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile
from aiogram.enums import ParseMode
from aiogram import html
from aiogram.types.web_app_info import WebAppInfo

db_client = pymongo.MongoClient("mongodb://localhost:27017/")
current_db = db_client["OXI"]

collection = current_db["OXI_tokens"]
collection2 = current_db["OXI_improvements"]

data_user = {
    "_id": "telegram_id",
    "user_name": "",
    "oxi_tokens_value": 0,
    "x_factor": 0,
    "vault_size": 0,
    "last_time_update": 0,
    "vault_use": 0,
    "last_update_vault": 0,
    "planet": "",
    "miners": {
        "slot_1": {
            "level": 1
        },
        "slot_2": {
            "level": 0
        },
    }
}

data_user_improvements = {
    "_id": "telegram_id",
    "storage": 1,
    "vault": 1
}


vault_size_CONSTANT = {
    1: 5000,
    2: 12000,
    3: 50000,
    4: 120000,
    5: 450000,
    6: 800000,
    7: 1600000,
    8: 3500000,
    9: 5000000,
    10: 10000000
}

vault_size_CONSTANT_View = {
    1: "5k",
    2: "12k",
    3: "50k",
    4: "120k",
    5: "450k",
    6: "800k",
    7: "1.6M",
    8: "3.5M",
    9: "5M",
    10: "10M"
}

miners_size = {
    1: 1000,
    2: 3500,
    3: 8000,
    4: 12000,
    5: 15000
}

logging.basicConfig(level=logging.INFO)
bot = Bot(token='7404195116:AAGs7cz3VhBp3T8E4I5KxXhdWmIsXeYEITM')
dp = Dispatcher()

async def update_tokens_value_vault(id):
    data = collection.find_one({'_id': id})
    data_user_2 = collection2.find_one({'_id': id})
    last_time_update = data['last_time_update']
    current_time = time.time() 
    time_difference = current_time - last_time_update
    time_different_in_hours = time_difference / 3600
    added_tokens = int(time_different_in_hours * 1000)
    vault_size = int(vault_size_CONSTANT[data_user_2['vault']])
    if added_tokens > vault_size:
        return vault_size
    return added_tokens

def get_main_menu_text(user_name, tokens_value, tokens_in_vault, vault_level, vault_use):
    text = f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∏–≥—Ä–æ–∫–∞ {user_name}\n\n================================\n<b>üí∞ –¢–æ–∫–µ–Ω–æ–≤ OXI: {tokens_value}</b>\n================================\n\n–•—Ä–∞–Ω–∏–ª–∏—â–µ: {tokens_in_vault}/{vault_size_CONSTANT_View[vault_level]} OXI ({vault_use}%)\n\n–ú–∞–π–Ω–µ—Ä–æ–≤: 1 (+1000 OXI/hour)\n–î–æ–±—ã—á–∞: 0\n–≠–Ω–µ—Ä–≥–∏—è: 20–µ/100–µ\n–©–∏—Ç: 100%"
    return text

async def main_menu(callback: types.CallbackQuery = None, message: types.Message = None):
    buttons = [
         [
            types.InlineKeyboardButton(text="–ú–∞–π–Ω–µ—Ä—ã (1/8)", callback_data="miners_main"),
            types.InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è (0)", callback_data="tasks")
        ],
        [
            types.InlineKeyboardButton(text="–°–∫–ª–∞–¥", callback_data="storage"),
            types.InlineKeyboardButton(text="–†—ã–Ω–æ–∫", callback_data="market"),
            types.InlineKeyboardButton(text="–î–æ–±—ã—á–∞", callback_data="mining_resources")
        ],
        [
            types.InlineKeyboardButton(text="<-- –°–æ–±—Ä–∞—Ç—å OXI -->", callback_data="collect_tokens"),
            types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="main_menu_update"),
            types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å", web_app=WebAppInfo(url="https://oxiprotocol.ru/"))
        ],
        [
            types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton(text="–õ–∏–≥–∞", callback_data="league"),
            types.InlineKeyboardButton(text="–≠–Ω–µ—Ä–≥–∏—è", callback_data="energy")
        ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    if callback:
        data_user = collection.find_one({"_id": callback.from_user.id})
        data_user_2 = collection2.find_one({"_id": callback.from_user.id})
        tokens_in_vault = await update_tokens_value_vault(callback.from_user.id)
        vault_use = int(tokens_in_vault / vault_size_CONSTANT[data_user_2['vault']] * 100)
        media = types.InputMediaPhoto(media="AgACAgIAAxkDAANAZlXF6Ly5ibqeNZCy1yw53K3BTL8AAhjZMRtSo7BKJXFKHkFNrvUBAAMCAAN4AAM1BA", caption=get_main_menu_text(data_user['user_name'], data_user['oxi_tokens_value'], tokens_in_vault, data_user_2['vault'], vault_use), parse_mode=ParseMode.HTML)
        await callback.message.edit_media(media=media, reply_markup=keyboard)
    else:
        data_user = collection.find_one({"_id": message.from_user.id})
        data_user_2 = collection2.find_one({"_id": message.from_user.id})
        tokens_in_vault = await update_tokens_value_vault(message.from_user.id)
        vault_use = int(tokens_in_vault / vault_size_CONSTANT[data_user_2['vault']] * 100)
        await message.answer_photo("AgACAgIAAxkDAANAZlXF6Ly5ibqeNZCy1yw53K3BTL8AAhjZMRtSo7BKJXFKHkFNrvUBAAMCAAN4AAM1BA", caption=get_main_menu_text(data_user['user_name'], data_user['oxi_tokens_value'], tokens_in_vault, data_user_2['vault'], vault_use), reply_markup=keyboard, parse_mode=ParseMode.HTML)

"AgACAgIAAxkDAAM-ZlXFiRk_cYexryJIYktkDdHebn8AAhbZMRtSo7BKhqxWN751XAcBAAMCAAN4AAM1BA"
"AgACAgIAAxkDAANAZlXF6Ly5ibqeNZCy1yw53K3BTL8AAhjZMRtSo7BKJXFKHkFNrvUBAAMCAAN4AAM1BA"

# @dp.message(Command('images'))
# async def load(message: types.Message):
#     file_ids = []
#     image_from_pc = FSInputFile("output.png")
#     result = await message.answer_photo(
#         image_from_pc,
#         caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
#     )
#     file_ids.append(result.photo[-1].file_id)
#     print(file_ids)

@dp.callback_query(F.data == ("miners_main"))
async def get_storage(callback: types.CallbackQuery):
    buttons = []
    data_user = collection.find_one({"_id": callback.from_user.id})
    buttons_add = []
    for slot, data_miner in data_user['miners'].items():
        if len(buttons_add) == 2:
            buttons.append(buttons_add)
            buttons_add.clear()
        text_button = "–ú–∞–π–Ω–µ—Ä " + slot.split("_")[1]
        buttons_add.append(types.InlineKeyboardButton(text=text_button, callback_data=f"miner_{slot.split("_")[1]}"))
    if len(buttons_add) != 0:
        buttons.append(buttons_add)
    buttons.append(types.InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu_update"))
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"–ú–∞–π–Ω–µ—Ä—ã 1/8"
    media = types.InputMediaPhoto(media="AgACAgIAAxkDAANAZlXF6Ly5ibqeNZCy1yw53K3BTL8AAhjZMRtSo7BKJXFKHkFNrvUBAAMCAAN4AAM1BA", caption=text, parse_mode=ParseMode.HTML)
    await callback.message.edit_media(media=media, reply_markup=keyboard)

@dp.callback_query(F.data == ("storage"))
async def get_storage(callback: types.CallbackQuery):
    buttons = [
        [types.InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu_update")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"–°–∫–ª–∞–¥ 0/1000 (–£—Ä–æ–≤–µ–Ω—å 1)\n\n–ù–∞ —Å–∫–ª–∞–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã, –¥–æ–±—ã–≤–∞—é—â–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±—ã—Ç—ã–µ —Ä–µ—Å—É—Ä—Å—ã. –ó–¥–µ—Å—å –∂–µ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª—é–±—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
    media = types.InputMediaPhoto(media="AgACAgIAAxkDAANAZlXF6Ly5ibqeNZCy1yw53K3BTL8AAhjZMRtSo7BKJXFKHkFNrvUBAAMCAAN4AAM1BA", caption=text, parse_mode=ParseMode.HTML)
    await callback.message.edit_media(media=media, reply_markup=keyboard)

@dp.callback_query(F.data == ("collect_tokens"))
async def collect_tokens(callback: types.CallbackQuery):
    added_tokens = await update_tokens_value_vault(callback.from_user.id)
    data = collection.find_one({'_id': callback.from_user.id})
    data['oxi_tokens_value'] += added_tokens
    data['last_time_update'] = time.time()
    new_data = collection.replace_one({'_id': callback.from_user.id}, data)
    print(new_data)
    buttons = [
        [
            types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="main_menu")
        ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    media = types.InputMediaPhoto(media="AgACAgIAAxkDAANAZlXF6Ly5ibqeNZCy1yw53K3BTL8AAhjZMRtSo7BKJXFKHkFNrvUBAAMCAAN4AAM1BA", caption=f"–¢–æ–∫–µ–Ω–æ–≤ –∑–∞—á–∏—Å–ª–µ–Ω–æ: {added_tokens}")
    await callback.message.edit_media(media=media, reply_markup=keyboard)

@dp.callback_query(F.data == ("main_menu_update"))
async def get_main_menu_update(callback: types.CallbackQuery):
    try:
        await main_menu(callback=callback)
    except TelegramBadRequest:
        pass
     
@dp.callback_query(F.data == ("main_menu"))
async def get_market(callback: types.CallbackQuery):
	await main_menu(callback=callback)


@dp.callback_query(F.data == ("market"))
async def get_market(callback: types.CallbackQuery):
     pass

@dp.callback_query(F.data == ("mining_resources"))
async def get_mining_resources(callback: types.CallbackQuery):
     pass

@dp.callback_query(F.data == ("profile"))
async def get_profile(callback: types.CallbackQuery):
    buttons = [
        [
            types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏", callback_data="num_finish")
        ],
        [
            types.InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu_update")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    data = collection.find_one({'_id': callback.from_user.id})
    text = f"–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {data['user_name']}\n\nID: {data['_id']}\n\n–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0\n–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: +5000 OXI\nVIP: 1\n\n–ì—Ä—É–ø–ø–∞: None\n–õ–∏–≥–∞: Bronze"
    media = types.InputMediaPhoto(media="AgACAgIAAxkDAANAZlXF6Ly5ibqeNZCy1yw53K3BTL8AAhjZMRtSo7BKJXFKHkFNrvUBAAMCAAN4AAM1BA", caption=text)
    await callback.message.edit_media(media=media, reply_markup=keyboard)

@dp.callback_query(F.data == ("league"))
async def get_league(callback: types.CallbackQuery):
     pass

@dp.callback_query(F.data == ("energy"))
async def get_energy(callback: types.CallbackQuery):
     pass


@dp.callback_query(F.data == ("improvements"))
async def get_storage(callback: types.CallbackQuery):
    buttons = [
        [
            types.InlineKeyboardButton(text="-->", callback_data="improvements_vault")
        ],
        [
            types.InlineKeyboardButton(text="–£–ª—É—á—à–∏—Ç—å", callback_data="num_finish")
        ],
        [
            types.InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu_update")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_caption(caption=f"–°–∫–ª–∞–¥ –£—Ä–æ–≤–µ–Ω—å 1.\n\n–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: ", reply_markup=keyboard)

@dp.callback_query(F.data == ("improvements_vault"))
async def get_storage(callback: types.CallbackQuery):
    buttons = [
        [
            types.InlineKeyboardButton(text="<--", callback_data="improvements"),
            types.InlineKeyboardButton(text="-->", callback_data="num_finish")
        ],
        [
            types.InlineKeyboardButton(text="–£–ª—É—á—à–∏—Ç—å", callback_data="num_finish")
        ],
        [
            types.InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="num_finish")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    data = collection2.find_one({'_id': callback.from_user.id})
    await callback.message.edit_caption(caption=f"–•—Ä–∞–Ω–∏–ª–∏—â–µ –£—Ä–æ–≤–µ–Ω—å {data['vault']}.\n\n–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: 10000 OXI", reply_markup=keyboard)


"–£–ª—É—á—à–µ–Ω–∏—è -> –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ <- -> –ò –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã—é–æ—Ä–∞ –ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –¢—Ä–µ–±—É—é—Ç—Å—è –≤ –æ—Å–Ω–≤–Ω–æ–º —Ç–æ–µ–Ω—ã OXI + —Ä–µ—Å—É—Ä—Å—ã. –ú–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å premium"
"–ü—Ä–æ—Ñ–∏–ª—å -> –£–ø—Ä–∞–≤–ª–µ–Ω–ø–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ -> –ü–µ—Ä–µ–≤–µ—Å—Ç–∏, —Å–∂–µ—á—å"

@dp.message((Command("start")))
async def start(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞—á–∏–Ω–∞–µ–º!",
        callback_data="start_main")
    )
    user = collection.find_one({"_id": message.from_user.id})
    if user == None:
        await message.answer("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OXI Protocol!\n\n–ó–¥–µ—Å—å –≤–∞—Å –∂–¥–µ—Ç —Å–∞–º—ã–µ –Ω–µ–æ–±—ã—á–Ω—ã–µ –∏ –±—É—Ä–Ω—ã–µ –∏–≥—Ä—ã. –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–ª–∞–Ω–µ—Ç—É, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –±–∞–∑—É –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤–æ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö - –æ–±—ä–µ–¥–∏–Ω—è–π—Ç–µ—Å—å, –Ω–∞–ø–∞–¥–∞–π—Ç–µ, —É—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –≤–æ–π–Ω—ã, —Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–±—Ä–∏–∫–∏ –∏–ª–∏ –ø–æ–º–æ–≥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n–°–µ–π—á–∞—Å 1 —Å—Ç–∞–¥–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥. –ú–∞–π–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã, –¥–æ–±—ã–≤–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –∏—Ö –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ä—ã–Ω–∫–µ. \n–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ premium-—Ä–µ—Å—É—Ä—Å—ã, –Ω–æ –≤—Å—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Ç–∞–∫, —á—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n\n–¢–æ–∫–µ–Ω OXI - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞. –ü–æ–∑–∂–µ, –¥–æ–±—ã—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã, –±–æ–Ω—É—Å—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ NFT –±—É–¥—É—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã OXI.""", reply_markup=builder.as_markup())
        data_user = {
            "_id": message.from_user.id,
            "user_name": message.from_user.first_name,
            "oxi_tokens_value": 0,
            "x_factor": 1,
            "vault_size": 5000,
            "last_time_update": time.time(),
            "last_update_vault": 0,
            "planet": None,
            "miners": {
                "slot_1": {
                    "level": 1
                },
                "slot_2": {
                    "level": 0
                },
            }
        }
        collection.insert_one(data_user)

        data_user_improvements = {
            "_id": message.from_user.id,
            "storage": 1,
            "vault": 1
        }
        collection2.insert_one(data_user_improvements)
    else:
        await main_menu(message=message)


async def planet_xr_1(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="XR-2 -->",
        callback_data="XR-2")
    )
    builder.add(types.InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å",
        callback_data="XR-1-OK")
    )
    await callback.message.edit_text("""–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –±–∞–∑–∞.\n\n–ü–ª–∞–Ω–µ—Ç–∞ XR-1.\n\n–ù–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ –≤—Å–µ —Ö–æ—Ä–æ—à–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ –Ω–æ—Ä–º–µ. –ó–¥–µ—Å—å –≤—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–∞–º–∞—è –≥–ª–∞–≤–Ω–∞—è - –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏—Ö –Ω–∞ –º–µ–∂–ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ. –ò–≥—Ä–æ–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–µ—Ç –±–µ–∑ –≤–∞—Å –Ω–µ —Å–ø—Ä–∞–≤—è—Ç—Å—è!\n\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–æ–≤: x1\n- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: —Å—Ç–∞–±–∏–ª—å–Ω–∞ (-20C | +20C)\n–í–æ–π–Ω—ã: –ó–∞–ø—Ä–µ—â–µ–Ω—ã\n\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–∞–∑—ã –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.""", reply_markup=builder.as_markup())

async def planet_xr_2(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="<-- XR-1",
        callback_data="XR-1")
    )
    builder.add(types.InlineKeyboardButton(
        text="XR-3 -->",
        callback_data="XR-3")
    )
    builder.add(types.InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å",
        callback_data="XR-2-OK")
    )
    await callback.message.edit_text("""–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –±–∞–∑–∞.\n\n–ü–ª–∞–Ω–µ—Ç–∞ XR-2.\n\n–ö—Ä–∞–π–Ω–µ –Ω–µ—Å–ø–æ–∫–æ–π–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ø–æ–≥–æ–¥–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —á–∞—Å—Ç–æ –≤—ã–≤–æ–¥—è—Ç –∏–∑ —Å—Ç—Ä–æ—è –≤—Å—é –≤–∞—à—É –±–∞–∑—É. –ó–¥–µ—Å—å –º–∞–∫–∏—Å–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —è–¥—Ä–∞ –ø–ª–∞–Ω–µ—Ç—ã - —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ù–∞–ø–∞–¥–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –Ω–æ —Å—Ç—Ä–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞–º–∏.
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–±—Ä–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ–º —É—á–∞—Ç–Ω–∏–∫–∞–º.\n\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–æ–≤: x5.\n–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞ (-100C | +150C)\–í–æ–π–Ω—ã: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã\n\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–∞–∑—ã –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.""", reply_markup=builder.as_markup())

async def planet_xr_3(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="<-- XR-2",
        callback_data="XR-2")
    )
    builder.add(types.InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å",
        callback_data="XR-3-OK")
    )
    await callback.message.edit_text("""–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –±–∞–∑–∞.\n\n–ü–ª–∞–Ω–µ—Ç–∞ XR-3 –∏–ª–∏ –ü–æ–ª–Ω—ã–π –•–∞–æ—Å.\n\n–ó–¥–µ—Å—å —Ç–≤–æ—Ä–∏—Ç—Å—è –ø–æ–ª–Ω—ã–π —Ö–∞–æ—Å –∏ —Ä–∞–∑—Ä—É—Ö–∞. –ë–∞–∑—ã –µ–ª–µ –¥–µ—Ä–∂–∞—Ç—å—Å—è. –≠–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Ç —Å–æ–≤—Å–µ–º, –ø—Ä–∏—Ö–æ–∂–∏—Ç—Å—è –ø–æ–ª—É—á–∞—Ç—å –µ–µ –∏–∑ –ª—é–±—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
–ù–∞–ø–∞–¥–µ–Ω–∏—è, –≤–æ–π–Ω—ã, —É–¥–∞—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã - –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª. –†–µ—Å—É—Ä—Å—ã –∫—Ä–∞–π–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã, –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–ø—É–ø–∞—Ç—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ä—ã–Ω–∫–µ –∏–ª–∏ –¥–æ–±—ã–≤–∞—Ç—å –≤–æ–π–Ω–æ–π. –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª—é—á–∞—é—Ç –≤—Å–µ –º–∞–π–Ω–µ—Ä—ã - –≤—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã 
–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏—Ö —Ä–∞–±–æ—Ç—É. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –º–∞–π–Ω–µ—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–æ–≤: x100\n- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: –∫—Ä–∞–π–Ω–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞\n- –í–æ–π–Ω—ã: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç\n\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–∞–∑—ã –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.""", reply_markup=builder.as_markup())

async def main_start(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å -->",
        callback_data="Main-Start")
    )
    await callback.message.edit_text("""–°—Ç–∞–¥–∏—è 1. –ê–∫—Ç–∏–≤–Ω—ã–π –º–∞–π–Ω–∏–Ω–≥.\n\n–§—É—Ö! –í—Ä–æ–¥–µ –¥–æ–±—Ä–∞–ª–∏—Å—å. –ú—ã –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ {}, –∑–¥–µ—Å—å –∫—Ä–∞–π–Ω–µ... –ü–µ—Ä–µ–¥–∞—é –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–±–µ!\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —É–ª—É—á—à–∞—Ç—å –±–∞–∑—É, —Ç—Ä–∞—Ç–∏—Ç—å –∏ —Å–∂–∏–≥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã OXI.\n\n–¢–æ–ª—å–∫–æ —Ç–µ–±–µ —Ä–µ—à–∞—Ç—å, –ø–æ –∫–∞–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º —Ç—ã –∏–≥—Ä–∞–µ—à—å. –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!""", reply_markup=builder.as_markup())


async def planet_xr_1_ok(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—Ç–∞—Ä—Ç!",
        callback_data="XR-1-OK-MAIN")
    )
    builder.add(types.InlineKeyboardButton(
        text="<-- –ù–∞–∑–∞–¥",
        callback_data="XR-1")
    )
    await callback.message.edit_text("""–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–ª–∞–Ω–µ—Ç—É XR-1.""", reply_markup=builder.as_markup())

async def planet_xr_2_ok(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—Ç–∞—Ä—Ç!",
        callback_data="XR-2-OK-MAIN")
    )
    builder.add(types.InlineKeyboardButton(
        text="<--",
        callback_data="XR-2")
    )
    await callback.message.edit_text("""–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–ª–∞–Ω–µ—Ç—É XR-2.""", reply_markup=builder.as_markup())

async def planet_xr_3_ok(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—Ç–∞—Ä—Ç!",
        callback_data="XR-3-OK-MAIN")
    )
    builder.add(types.InlineKeyboardButton(
        text="<-- –ù–∞–∑–∞–¥",
        callback_data="XR-3")
    )
    await callback.message.edit_text("""–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–ª–∞–Ω–µ—Ç—É XR-3.""", reply_markup=builder.as_markup())

async def get_profile_menu(callback: types.CallbackQuery):
      pass

async def update_tokens_value():
    pass


@dp.callback_query(F.data == ("start_main"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_1(callback)

@dp.callback_query(F.data == ("XR-1"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_1(callback)
     
@dp.callback_query(F.data == ("XR-2"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_2(callback)

@dp.callback_query(F.data == ("XR-3"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_3(callback)


@dp.callback_query(F.data == ("XR-1-OK"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_1_ok(callback)
     
@dp.callback_query(F.data == ("XR-2-OK"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_2_ok(callback)

@dp.callback_query(F.data == ("XR-3-OK"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_3_ok(callback)
	

@dp.callback_query(F.data == ("XR-1-OK-MAIN"))
async def send_random_value(callback: types.CallbackQuery):
    print(callback.message)
    await main_start(callback)
    
@dp.callback_query(F.data == ("XR-2-OK-MAIN"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_2_ok(callback)

@dp.callback_query(F.data == ("XR-3-OK-MAIN"))
async def send_random_value(callback: types.CallbackQuery):
	await planet_xr_3_ok(callback)

@dp.callback_query(F.data == ("Main-Start"))
async def send_random_value(callback: types.CallbackQuery):
	await main_menu(callback)
	
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

"""
–≠–∫–æ–Ω–æ–º–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
XR-1
–°—Ç–∞—Ä—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞ (+1k/hour)
–•—Ä–∞–Ω–∏–ª–∏—â–µ - 4K/5K/6K/8K/12K/15K/30K
–°–±–æ—Ä –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 3.
–í–æ–∑–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –º–∞–π–Ω–µ—Ä. –ú–∞–π–Ω–µ—Ä–æ–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–æ —Å —É–ª–æ–≤–∏–µ–º, —á—Ç–æ –Ω–µ—Ç –ø–µ—Ä–µ–≥—Ä–∑—É–∫–µ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.  

–î–æ–±—ã–≤–∞—é—â–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–∫—Ä—É–≥ –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–µ–¥–∞—Ç—å - 100K –¢–æ–∫–µ–Ω–æ–≤. (+30K –∫–∞–∂–¥—ã–µ 100–∫–º). –¢—Ä–µ–±—É—é—Ç –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ø –ª–∏–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è.
–î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏—Ö –Ω–∞ –º–µ–∂–ø–ª–∞–Ω–µ—Ç—Ä–∞–Ω–æ–º —Ä—ã–Ω–∫–µ.


–ì—Ä—É–ø–ø—ã. –ó–∞–∫—Ä—ã—Ç—ã–µ/–æ—Ç–∫—Ä—ã—Ç—ã–µ. –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤. 
–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã - —Ä—ã–Ω–æ–∫, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —É–ª—É—á—à–µ–Ω–∏—è, –¥—Ä—É–∑—å—è(–≥—Ä—É–ø–ø–∞, —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤), –ø—Ä–æ—Ñ–∏–ª—å, —ç–Ω–µ—Ä–≥–∏—è"""

"""
–ü—Ä–æ—Ñ–∏–ª—å

–ò–º—è –∏–≥—Ä–æ–∫–∞: 
ID –∏–≥—Ä–æ–∫–∞: 
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
–ì—Ä—É–ø–ø–∞
–õ–∏–≥–∞

–ü–ª–∞–Ω–µ—Ç–∞
–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
–ê–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±—ã–≤–∞—é—â–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

–ú–∞–π–Ω–µ—Ä—ã 
1 —É—Ä–æ–≤–µ–Ω—å +1000 OXI/hour
2 —É—Ä–æ–≤–µ–Ω—å + 3500
3 —É—Ä–æ–≤–µ–Ω—å + 8000
4 —É—Ä–æ–≤–µ–Ω—å + 15000
5 —É—Ä–æ–≤–µ–Ω—å + 30000

–õ–∏–≥–∞ 
–¥—Ä–æ–Ω—ã –¥–æ–±—ã–≤–∞–ø—é—â–∏–µ  oxi
premium –¥—Ä–æ–Ω—ã

"""